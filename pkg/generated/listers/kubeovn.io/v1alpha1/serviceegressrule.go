/*
Copyright 2021 The Kube-OVN CES Controller Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubeovn/ces-controller/pkg/apis/kubeovn.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceEgressRuleLister helps list ServiceEgressRules.
// All objects returned here must be treated as read-only.
type ServiceEgressRuleLister interface {
	// List lists all ServiceEgressRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceEgressRule, err error)
	// ServiceEgressRules returns an object that can list and get ServiceEgressRules.
	ServiceEgressRules(namespace string) ServiceEgressRuleNamespaceLister
	ServiceEgressRuleListerExpansion
}

// serviceEgressRuleLister implements the ServiceEgressRuleLister interface.
type serviceEgressRuleLister struct {
	indexer cache.Indexer
}

// NewServiceEgressRuleLister returns a new ServiceEgressRuleLister.
func NewServiceEgressRuleLister(indexer cache.Indexer) ServiceEgressRuleLister {
	return &serviceEgressRuleLister{indexer: indexer}
}

// List lists all ServiceEgressRules in the indexer.
func (s *serviceEgressRuleLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceEgressRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceEgressRule))
	})
	return ret, err
}

// ServiceEgressRules returns an object that can list and get ServiceEgressRules.
func (s *serviceEgressRuleLister) ServiceEgressRules(namespace string) ServiceEgressRuleNamespaceLister {
	return serviceEgressRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceEgressRuleNamespaceLister helps list and get ServiceEgressRules.
// All objects returned here must be treated as read-only.
type ServiceEgressRuleNamespaceLister interface {
	// List lists all ServiceEgressRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ServiceEgressRule, err error)
	// Get retrieves the ServiceEgressRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ServiceEgressRule, error)
	ServiceEgressRuleNamespaceListerExpansion
}

// serviceEgressRuleNamespaceLister implements the ServiceEgressRuleNamespaceLister
// interface.
type serviceEgressRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceEgressRules in the indexer for a given namespace.
func (s serviceEgressRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ServiceEgressRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ServiceEgressRule))
	})
	return ret, err
}

// Get retrieves the ServiceEgressRule from the indexer for a given namespace and name.
func (s serviceEgressRuleNamespaceLister) Get(name string) (*v1alpha1.ServiceEgressRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("serviceegressrule"), name)
	}
	return obj.(*v1alpha1.ServiceEgressRule), nil
}
